from typing import Any, Optional, Dict, List, Generic, TypeVar, List, overload
import datetime

_T = TypeVar('_T')

class Hook(Generic[_T]):
    parent: JSONProperty[_T] = ...
    method: Any = ...
    def __init__(self, parent: JSONProperty[_T]) -> None: ...
    def __call__(self, method: Any) -> JSONProperty[_T]: ...
    def call(self, instance: Any, val: _T) -> _T: ...

class JSONProperty(Generic[_T]):
    name: str = ...
    default: Optional[_T] = ...
    prop_name: str = ...
    expression: Hook[_T] = ...
    after_get: Hook[_T] = ...
    before_set: Hook[_T] = ...
    def __init__(self, default: Optional[_T] = ..., prop_name: str = ...) -> None: ...
    def __get__(self, instance: Any, owner: Any): ...
    def __set__(self, instance: Any, value: Any) -> None: ...
    def __delete__(self, instance: Any) -> None: ...
    def get_profile(self, instance: Any): ...
    def save(self, instance: Any, value: Any = ...): ...
    def reload(self, instance: Any): ...
    def make_expression(self, base_exp: Any): ...
    def decode(self, val: Any) -> Any: ...
    def encode(self, val: Any) -> Any: ...
    def __hash__(self) -> int: ...

class StringProperty(JSONProperty[str]):
    def make_expression(self, base_exp: Any): ...

class DateTimeProperty(JSONProperty[datetime.datetime]):
    def make_expression(self, base_exp: Any): ...
    def decode(self, val: Any) -> Optional[datetime.datetime]: ...
    def encode(self, val: Any) -> Optional[str]: ...

class IntegerProperty(JSONProperty[int]):
    def make_expression(self, base_exp: Any): ...
    def decode(self, val: Any) -> Optional[int]: ...
    def encode(self, val: Any) -> Optional[int]: ...

class BooleanProperty(JSONProperty[bool]):
    def make_expression(self, base_exp: Any): ...
    def decode(self, val: Any) -> Optional[bool]: ...
    def encode(self, val: Any) -> Optional[bool]: ...

class ObjectProperty(JSONProperty[Any]):
    def decode(self, val: Any) -> Optional[Dict[str, Any]]: ...
    def encode(self, val: Any) -> Optional[Dict[str, Any]]: ...

class ArrayProperty(JSONProperty[List[Any]]):
    def decode(self, val: Any) -> Optional[List[Any]]: ...
    def encode(self, val: Any) -> Optional[List[Any]]: ...
