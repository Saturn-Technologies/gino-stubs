from typing import (
    Any,
    Optional,
    Union,
    TypeVar,
    Callable,
    Dict,
    Tuple,
    Type,
    Generic,
    TypeVar,
    Iterator,
    overload,
)
from sqlalchemy import Column, Table
from collections import OrderedDict
from .schema import GinoSchemaVisitor
from .api import Gino

_FuncType = Callable[..., Any]
_F = TypeVar('_F', bound=_FuncType)
_T = TypeVar('_T')
_KT = TypeVar('_KT')
_VT = TypeVar('_VT')

class ColumnAttribute(Generic[_T]):
    prop_name: str = ...
    column: Column[_T] = ...
    def __init__(self, prop_name: str, column: Column[_T]) -> None: ...
    @overload
    def __get__(self, instance: None, owner: Any) -> Column[_T]: ...
    @overload
    def __get__(self, instance: object, owner: Any) -> _T: ...
    def __set__(self, instance: Any, value: _T) -> None: ...
    def __delete__(self, instance: Any) -> None: ...

class InvertDict(Dict[_KT, _VT]):
    @overload
    def invert_get(self, k: _VT) -> Optional[_KT]: ...
    @overload
    def invert_get(self, k: _VT, default: Union[_KT, _T]) -> Union[_KT, _T]: ...

class ModelType(type):
    gino: GinoSchemaVisitor
    def _check_abstract(cls) -> None: ...
    def __iter__(cls) -> Iterator[Column[Any]]: ...
    @classmethod
    def __prepare__(
        metacls, __name: str, __bases: Tuple[type, ...], **kwargs: Any
    ) -> OrderedDict[str, Any]: ...
    def __new__(
        metacls, name: str, bases: Tuple[type, ...], namespace: Any, **kwargs: Any
    ) -> type: ...
    def insert(cls, values=None, inline=False, **kwargs) -> Any: ...
    def join(cls, right, onclause=None, isouter=False, full=False) -> Any: ...
    def outerjoin(cls, right, onclause=None, full=False) -> Any: ...

def declared_attr(m: _F) -> _F: ...

class Model:
    __metadata__: Gino = ...
    __table__: Table = ...
    __attr_factory__: Type[ColumnAttribute] = ...
    __values__: Dict[str, Any] = ...

    _column_name_map: InvertDict[str, str]
    def __init__(self) -> None: ...

def declarative_base(
    metadata: Gino, model_classes: Tuple[Type[Any], ...] = ..., name: str = ...
) -> ModelType: ...
