[case testDeclarativeBase]
from typing import TYPE_CHECKING, Any
from gino import Gino
from gino.declarative import declarative_base
from gino.crud import CRUDModel
from datetime import datetime

db = Gino()
Base = declarative_base(db, (CRUDModel,))

class Model(Base):
    __tablename__ = 'model'

    id = db.Column(db.Integer(), primary_key=True)
    name = db.Column(db.String(), nullable=False)
    created_at = db.Column(db.DateTime())

async def main() -> None:
    model = await Model.create()
    reveal_type(model)  # E: Revealed type is 'main.Model*'
    reveal_type(model.id)  # E: Revealed type is 'builtins.int*'
    reveal_type(model.name)  # E: Revealed type is 'builtins.str*'
    reveal_type(model.created_at)  # E: Revealed type is 'Union[datetime.datetime*, None]'

    model = Model()
    model.created_at = datetime.now()
    await model.create()
[out]

[case testDeclarativeBaseNamed]
from typing import TYPE_CHECKING, Any
from gino import Gino
from gino.declarative import declarative_base
from gino.crud import CRUDModel
from datetime import datetime

db = Gino()
Base = declarative_base(db, model_classes=(CRUDModel,))

class Model(Base):
    __tablename__ = 'model'

    id = db.Column(db.Integer(), primary_key=True)
    name = db.Column(db.String(), nullable=False)
    created_at = db.Column(db.DateTime())

async def main() -> None:
    model = await Model.create()
    reveal_type(model)  # E: Revealed type is 'main.Model*'
    reveal_type(model.id)  # E: Revealed type is 'builtins.int*'
    reveal_type(model.name)  # E: Revealed type is 'builtins.str*'
    reveal_type(model.created_at)  # E: Revealed type is 'Union[datetime.datetime*, None]'

    model = Model()
    model.created_at = datetime.now()
    await model.create()
[out]

[case testDeclarativeBaseNoModelClasses]
from typing import TYPE_CHECKING, Any
from gino import Gino
from gino.declarative import declarative_base
from gino.crud import CRUDModel
from datetime import datetime

db = Gino()
Base = declarative_base(db)

class Model(Base):
    __tablename__ = 'model'

    id = db.Column(db.Integer(), primary_key=True)
    name = db.Column(db.String(), nullable=False)
    created_at = db.Column(db.DateTime())

async def main() -> None:
    await Model.create()  # E: "Type[Model]" has no attribute "create"
    reveal_type(Model.gino)  # E: Revealed type is 'gino.schema.GinoSchemaVisitor'

    model = Model()
    model.gino  # E: "Model" has no attribute "gino"
    model.created_at = datetime.now()
[out]
