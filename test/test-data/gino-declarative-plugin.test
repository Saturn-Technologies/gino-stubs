[case testDeclarativeBase]
from typing import TYPE_CHECKING, Any
from gino import Gino
from gino.declarative import declarative_base
from gino.crud import CRUDModel
from datetime import datetime

db = Gino()
Base = declarative_base(db, (CRUDModel,))

class Model(Base):
    __tablename__ = 'model'

    id = db.Column(db.Integer(), primary_key=True)
    name = db.Column(db.String(), nullable=False)
    created_at = db.Column(db.DateTime())

async def main() -> None:
    model = await Model.create()
    reveal_type(model)  # N: Revealed type is 'main.Model*'
    reveal_type(model.id)  # N: Revealed type is 'builtins.int*'
    reveal_type(model.name)  # N: Revealed type is 'builtins.str*'
    reveal_type(model.created_at)  # N: Revealed type is 'Union[datetime.datetime*, None]'

    model = Model()
    model.created_at = datetime.now()
    await model.create()
[out]

[case testDeclarativeBaseNamed]
from typing import TYPE_CHECKING, Any
from gino import Gino
from gino.declarative import declarative_base
from gino.crud import CRUDModel
from datetime import datetime

db = Gino()
Base = declarative_base(db, model_classes=(CRUDModel,))

class Model(Base):
    __tablename__ = 'model'

    id = db.Column(db.Integer(), primary_key=True)
    name = db.Column(db.String(), nullable=False)
    created_at = db.Column(db.DateTime())

async def main() -> None:
    model = await Model.create()
    reveal_type(model)  # N: Revealed type is 'main.Model*'
    reveal_type(model.id)  # N: Revealed type is 'builtins.int*'
    reveal_type(model.name)  # N: Revealed type is 'builtins.str*'
    reveal_type(model.created_at)  # N: Revealed type is 'Union[datetime.datetime*, None]'

    model = Model()
    model.created_at = datetime.now()
    await model.create()
[out]

[case testDeclarativeBaseNoModelClasses]
from typing import Any
from gino import Gino
from gino.declarative import declarative_base
from datetime import datetime

db = Gino()
Base = declarative_base(db)

class Model(Base):
    __tablename__ = 'model'

    id = db.Column(db.Integer(), primary_key=True)
    name = db.Column(db.String(), nullable=False)
    created_at = db.Column(db.DateTime())

async def main() -> None:
    await Model.create()  # E: "Type[Model]" has no attribute "create"
    reveal_type(Model.gino)  # N: Revealed type is 'gino.schema.GinoSchemaVisitor'

    model = Model()
    model.gino  # E: "Model" has no attribute "gino"
    model.created_at = datetime.now()
[out]

[case testDeclarativeInstantiation]
from typing import Any
from gino import Gino
from gino.declarative import declarative_base
from gino.crud import CRUDModel
from datetime import datetime

db = Gino()
Base = declarative_base(db, (CRUDModel,))

class Model(Base):
    __tablename__ = 'model'

    id = db.Column(db.Integer(), primary_key=True)
    name = db.Column(db.String(), nullable=False)
    created_at = db.Column(db.DateTime())

model1 = Model(id=0, name='John Doe', created_at=datetime.now())
model2 = Model(id=1, name=None, created_at=datetime.now())  # E: Incompatible type for argument "name" (got "None", expected "str")
model3 = Model(id=None, name='John Doe', created_at=None)  # E: Incompatible type for argument "id" (got "None", expected "int")
model4 = Model(id='2', name='John Doe')  # E: Incompatible type for argument "id" (got "str", expected "int")
model5 = Model(id=3, first_name='John')  # E: Unexpected argument "first_name"
[out]

[case testDeclarativeCreate]
from typing import Any
from gino import Gino
from gino.declarative import declarative_base
from gino.crud import CRUDModel
from datetime import datetime

db = Gino()
Base = declarative_base(db, (CRUDModel,))

class Model(Base):
    __tablename__ = 'model'

    id = db.Column(db.Integer(), primary_key=True)
    name = db.Column(db.String(), nullable=False)
    created_at = db.Column(db.DateTime())

async def main() -> None:
    model1 = await Model.create(id=0, name='John Doe', created_at=datetime.now())
    model2 = await Model.create(id=1, name=None, created_at=datetime.now())  # E: Incompatible type for argument "name" (got "None", expected "str")
    model3 = await Model.create(id=None, name='John Doe', created_at=None)  # E: Incompatible type for argument "id" (got "None", expected "int")
    model4 = await Model.create(id='2', name='John Doe')  # E: Incompatible type for argument "id" (got "str", expected "int")
    model5 = await Model.create(id=3, first_name='John')  # E: Unexpected argument "first_name"
[out]

[case testDeclarativeUpdate]
from typing import Any
from gino import Gino
from gino.declarative import declarative_base
from gino.crud import CRUDModel
from datetime import datetime

db = Gino()
Base = declarative_base(db, (CRUDModel,))

class Model(Base):
    __tablename__ = 'model'

    id = db.Column(db.Integer(), primary_key=True)
    name = db.Column(db.String(), nullable=False)
    created_at = db.Column(db.DateTime())

model = Model(name='John Doe', created_at=datetime.now())
model.update(name=None)  # E: Incompatible type for argument "name" (got "None", expected "str")
model.update(id=None, created_at=None)  # E: Incompatible type for argument "id" (got "None", expected "int")
model.update(id='2', name='John Doe')  # E: Incompatible type for argument "id" (got "str", expected "int")
model.update(id=3, first_name='John')  # E: Unexpected argument "first_name"
model.update(id=3).update(first_name='John')  # E: Unexpected argument "first_name"
[out]

[case testDeclarativeJsonProperty]
from typing import Any
from gino import Gino
from gino.declarative import declarative_base
from gino.crud import CRUDModel
from sqlalchemy.dialects.postgresql import JSONB

db = Gino()
Base = declarative_base(db, (CRUDModel,))

class Model(Base):
    __tablename__ = 'model'

    id = db.Column(db.Integer(), primary_key=True)
    name = db.Column(db.String(), nullable=False)
    profile = db.Column(JSONB(), server_default='{}')
    max_age = db.IntegerProperty(default=0)

model = Model(name='John Doe', max_age=2)
model.update(max_age=None)
model.update(max_age=4)
model.update(name='foo')
model.update(max_age='asdf')  # E: Incompatible type for argument "max_age" (got "str", expected "Optional[int]")
[out]
